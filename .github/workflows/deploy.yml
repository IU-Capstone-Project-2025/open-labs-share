name: CD - Deploy to Server

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Comma-separated list of services to deploy (e.g., api-gateway,auth-service). Leave empty to deploy all.'
        required: false
        default: ''

  # pull_request:
  #   branches:
  #     - main
  #     - dev
  
  # push:
  #   branches:
  #     - '**' # Deploy all branches, MUST BE DELETED BEFORE MERGING TO MAIN

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "REDIS_BROKER_URL=${{ secrets.REDIS_BROKER_URL }}" >> .env
          echo "MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}" >> .env
          echo "MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}" >> .env
          echo "POSTGRES_ML_PASSWORD=${{ secrets.POSTGRES_ML_PASSWORD }}" >> .env
          echo "JWT_SIGNING_KEY=${{ secrets.JWT_SIGNING_KEY }}" >> .env
          echo "POSTGRES_USERS_PASSWORD=${{ secrets.POSTGRES_USERS_PASSWORD }}" >> .env
          echo "POSTGRES_LABS_PASSWORD=${{ secrets.POSTGRES_LABS_PASSWORD }}" >> .env
          echo "POSTGRES_ARTICLES_PASSWORD=${{ secrets.POSTGRES_ARTICLES_PASSWORD }}" >> .env
          echo "POSTGRES_FEEDBACK_PASSWORD=${{ secrets.POSTGRES_FEEDBACK_PASSWORD }}" >> .env
          echo "MONGO_ROOT_USER=${{ secrets.MONGO_ROOT_USER }}" >> .env
          echo "MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}" >> .env

      - name: Create groq_keys.txt file
        run: |
          mkdir -p ml
          echo "${{ secrets.GROQ_API_KEYS }}" > ml/groq_keys.txt

      - name: Ensure active_env file exists
        run: |
          if [ ! -f haproxy/active_env ]; then
            echo "blue" > haproxy/active_env
          fi

      - name: Deploy services
        run: |
          chmod +x ./scripts/*.sh
          
          # Determine target environment
          CURRENT_ENV=$(cat haproxy/active_env)
          if [ "$CURRENT_ENV" == "blue" ]; then
            TARGET_ENV="green"
          else
            TARGET_ENV="blue"
          fi
          
          echo "Current live environment is $CURRENT_ENV. Deploying to $TARGET_ENV."
          
          # Convert comma-separated list to space-separated list for deployment script
          SERVICES_TO_DEPLOY=$(echo ${{ github.event.inputs.services }} | tr ',' ' ')
          
          # Run the deployment script for the target environment
          "./scripts/deploy_${TARGET_ENV}.sh" $SERVICES_TO_DEPLOY
          
          # The deploy script will handle health checks and traffic switching