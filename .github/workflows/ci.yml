name: Unified CI

on:
  push:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'services/api-gateway/**'
              - 'docker/Dockerfile.api-gateway'
            users-service:
              - 'services/users-service/**'
              - 'docker/Dockerfile.users-service'
            auth-service:
              - 'services/auth-service/**'
              - 'docker/Dockerfile.auth-service'
            labs-service:
              - 'services/labs-service/**'
              - 'docker/Dockerfile.labs-service'
            articles-service:
              - 'services/articles-service/**'
              - 'docker/Dockerfile.articles-service'
            feedback-service:
              - 'services/feedback-service/**'
              - 'docker/Dockerfile.feedback-service'
            ml-service:
              - 'ml/**'
              - 'docker/Dockerfile.ml-service'

  test-java:
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.services, 'api-gateway') || contains(needs.detect-changes.outputs.services, 'users-service') || contains(needs.detect-changes.outputs.services, 'auth-service')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, users-service, auth-service]
        include:
          - service: api-gateway
            path: services/api-gateway
          - service: users-service
            path: services/users-service
          - service: auth-service
            path: services/auth-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ matrix.service }}-${{ hashFiles(format('{0}/**/*.gradle*', matrix.path), format('{0}/gradle-wrapper.properties', matrix.path)) }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ matrix.service }}-

      - name: Make gradlew executable
        working-directory: ${{ matrix.path }}
        run: chmod +x ./gradlew

      - name: Run tests
        working-directory: ${{ matrix.path }}
        run: ./gradlew test

  test-python:
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.services, 'labs-service') || contains(needs.detect-changes.outputs.services, 'articles-service')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [labs-service, articles-service]
        include:
          - service: labs-service
            path: services/labs-service
          - service: articles-service
            path: services/articles-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('{0}/requirements.txt', matrix.path)) }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-

      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run tests
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f requirements.txt ] && grep -q pytest requirements.txt; then
            pytest
          else
            echo "No tests configured for ${{ matrix.service }}"
          fi

  test-go:
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.services, 'feedback-service')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-feedback-${{ hashFiles('services/feedback-service/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-feedback-

      - name: Run tests
        working-directory: services/feedback-service
        run: |
          if [ -f go.mod ]; then
            go test ./...
          else
            echo "No tests configured for feedback-service"
          fi

  build-and-push:
    needs: [detect-changes, test-java, test-python, test-go]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            type=sha,prefix=${{ github.ref_name }}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 