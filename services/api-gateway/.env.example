# API Gateway Environment Configuration Template
# Copy this file to .env and update with your actual values

# ===========================================
# APPLICATION CONFIGURATION
# ===========================================
SPRING_APP_NAME=api-gateway
SPRING_APP_PORT=8080
CONTAINER_NAME=aoi-gateway

# ===========================================
# GRPC CLIENT CONFIGURATION
# ===========================================
# External gRPC services that should be running separately
# In production, these should point to your actual service endpoints
AUTH_SERVICE_HOST=grpc-auth-service
AUTH_SERVICE_PORT=9090
USER_SERVICE_HOST=grpc-user-service
USER_SERVICE_PORT=9091
ARTICLE_SERVICE_HOST=grpc-article-service
ARTICLE_SERVICE_PORT=9092
LAB_SERVICE_HOST=grpc-lab-service
LAB_SERVICE_PORT=9092

# ===========================================
# GRPC CONNECTION SETTINGS
# ===========================================
GRPC_KEEP_ALIVE_TIME=30s
GRPC_KEEP_ALIVE_TIMEOUT=10s
GRPC_MAX_MESSAGE_SIZE=4MB
GRPC_NEGOTIATION_TYPE=plaintext

# ===========================================
# LOGGING CONFIGURATION
# ===========================================
LOG_LEVEL_ROOT=INFO
LOG_LEVEL_APP=DEBUG
LOG_LEVEL_GRPC=INFO

# ===========================================
# NETWORK CONFIGURATION
# ===========================================
NETWORK_NAME=grpc-network

# ===========================================
# ENVIRONMENT PROFILES
# ===========================================
# Options: development, docker, staging, production
PROFILE=docker

# ===========================================
# PRODUCTION SECURITY NOTES
# ===========================================
# For production environments, consider:
# 1. Using TLS for gRPC connections (change GRPC_NEGOTIATION_TYPE to tls)
# 2. Using proper service discovery instead of hardcoded hostnames
# 3. Setting LOG_LEVEL_ROOT to WARN or ERROR
# 4. Using secrets management for sensitive configuration
# 5. Setting up proper monitoring and alerting
