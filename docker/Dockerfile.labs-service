# Multi-stage build for Python gRPC service
FROM python:3.12-slim AS builder

WORKDIR /app

# Install system dependencies for building
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements if they exist
COPY services/labs-service/requirements.txt* ./

# Install Python dependencies
RUN if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi

# Install grpc tools
RUN pip install --no-cache-dir grpcio grpcio-tools

# Copy proto files and generate Python code
COPY services/labs-service/*.proto ./
RUN python -m grpc_tools.protoc \
    --python_out=. \
    --grpc_python_out=. \
    --proto_path=. \
    *.proto

# Copy application source
COPY services/labs-service/ .

# Production stage
FROM python:3.12-slim

WORKDIR /app

# Create non-root user
RUN groupadd -r appgroup && \
    useradd -r -g appgroup appuser && \
    chown appuser:appgroup /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy from builder
COPY --from=builder /app .
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Switch to non-root user
USER appuser

# Expose gRPC port
EXPOSE 9091

# Health check (placeholder - adjust when service is implemented)
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD echo "Service is running" || exit 1

# Run the service (placeholder - adjust when service is implemented)
CMD ["python", "main.py"] 