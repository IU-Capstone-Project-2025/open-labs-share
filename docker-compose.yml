services:
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app/frontend
      - frontend_node_modules:/app/frontend/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_GATEWAY_ENDPOINT=http://localhost:8080/api/v1
      - VITE_AUTH_API_ENDPOINT=http://localhost:8081/api/v1/auth
    restart: unless-stopped
    depends_on:
      - api-gateway
      - auth-service
    networks:
      - app-network

  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_APP_PORT=8080
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=9092
      - USER_SERVICE_HOST=users-service
      - USER_SERVICE_PORT=9093
      - LAB_SERVICE_HOST=labs-service
      - LAB_SERVICE_PORT=9091
      - ARTICLE_SERVICE_HOST=articles-service
      - ARTICLE_SERVICE_PORT=50051
      - ML_SERVICE_HOST=ml-service
      - ML_SERVICE_PORT=8082
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - auth-service
      - users-service
      - labs-service
      - articles-service
      - ml-service
    networks:
      - app-network

  auth-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth-service
    ports:
      - "8081:8081"
      - "9092:9092"
    environment:
      - PORT=8081
      - GRPC_PORT=9092
      - USERS_SERVICE_HOST=users-service
      - USERS_SERVICE_PORT=9093
      - JWT_SIGNING_KEY=${JWT_SIGNING_KEY}
      - ACCESS_TOKEN_EXPIRATION=144000000
      - REFRESH_TOKEN_EXPIRATION=1008000000
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - users-service
    networks:
      - app-network

  users-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.users-service
    ports:
      - "9093:9093"
    environment:
      - GRPC_PORT=9093
      - DB_URL=jdbc:postgresql://postgres-users:5432/users_service
      - DB_USERNAME=users_user
      - DB_PASSWORD=${POSTGRES_USERS_PASSWORD}
      - HIBERNATE_DDL_AUTO=update
      - SHOW_SQL=false
      - LOG_LEVEL=INFO
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      postgres-users:
        condition: service_healthy
    networks:
      - app-network

  labs-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.labs-service
    ports:
      - "9091:9091"
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=9091
      - POSTGRESQL_HOST=postgres-labs
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USER=labs_user
      - POSTGRESQL_PASSWORD=${POSTGRES_LABS_PASSWORD}
      - POSTGRESQL_NAME=labs_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MONGODB_HOST=mongodb-labs
      - MONGODB_PORT=27017
      - MONGODB_USER=${MONGO_ROOT_USER}
      - MONGODB_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGODB_NAME=labs_mongo_db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9091"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres-labs:
        condition: service_healthy
      mongodb-labs:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network

  articles-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.articles-service
    ports:
      - "50051:50051"
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=50051
      - DB_HOST=postgres-articles
      - DB_PORT=5432
      - DB_USER=articles_user
      - DB_PASSWORD=${POSTGRES_ARTICLES_PASSWORD}
      - DB_NAME=articles_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres-articles:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network

  feedback-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.feedback-service
    ports:
      - "9090:9090"
    environment:
      - GRPC_PORT=9090
      - DB_HOST=postgres-feedback
      - DB_PORT=5432
      - DB_USER=feedback_user
      - DB_PASSWORD=${POSTGRES_FEEDBACK_PASSWORD}
      - DB_NAME=feedback_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=feedback
      - MINIO_USE_SSL=false
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres-feedback:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network

  postgres-users:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=users_service
      - POSTGRES_USER=users_user
      - POSTGRES_PASSWORD=${POSTGRES_USERS_PASSWORD}
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U users_user -d users_service
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  postgres-feedback:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=feedback_db
      - POSTGRES_USER=feedback_user
      - POSTGRES_PASSWORD=${POSTGRES_FEEDBACK_PASSWORD}
    volumes:
      - postgres-feedback-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U feedback_user -d feedback_db
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  postgres-labs:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=labs_db
      - POSTGRES_USER=labs_user
      - POSTGRES_PASSWORD=${POSTGRES_LABS_PASSWORD}
    volumes:
      - postgres-labs-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U labs_user -d labs_db
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  postgres-articles:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=articles_db
      - POSTGRES_USER=articles_user
      - POSTGRES_PASSWORD=${POSTGRES_ARTICLES_PASSWORD}
    volumes:
      - postgres-articles-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U articles_user -d articles_db
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  ml-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.ml-service
    ports:
      - "8083:8081"
    environment:
      - DEVICE=cuda
      - RAG_DB_PATH=/app/ml/faiss
      - SCORE_THRESHOLD=1.0
      - EMBEDDING_MODEL_NAME=BAAI/bge-small-en-v1.5
      - LLM_MODEL_NAME=Qwen/Qwen2.5-Coder-1.5B-Instruct
      - PDF_DIR=/app/ml/data/predator-pray-22/pdfs
      - CODE_DIR=/app/ml/data/predator-pray-22/code
      - POSTGRES_USER=ml_user
      - POSTGRES_PASSWORD=${POSTGRES_ML_PASSWORD}
      - POSTGRES_HOST=postgres-ml
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chat_history_db
    volumes:
      - ./ml:/app/ml
      - ml-models:/app/models
    restart: unless-stopped
    depends_on:
      postgres-ml:
        condition: service_healthy
    networks:
      - app-network

  postgres-ml:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=chat_history_db
      - POSTGRES_USER=ml_user
      - POSTGRES_PASSWORD=${POSTGRES_ML_PASSWORD}
    volumes:
      - postgres-ml-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ml_user -d chat_history_db
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  mongodb-labs:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=labs_mongo_db
    volumes:
      - mongodb-labs-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/labs_mongo_db --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  frontend_node_modules:
  postgres-users-data:
  postgres-feedback-data:
  postgres-labs-data:
  postgres-articles-data:
  postgres-ml-data:
  ml-models:
  minio-data:
  mongodb-labs-data: