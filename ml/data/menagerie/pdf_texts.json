{
  "18~19": "4CCS1PPA Programming Practice and Applications\nCoursework 3: Predator/Prey Simulation\nMichael K¨ olling, Josh Murphy, Jeﬀery Raphael\nQuestions? programming@kcl.ac.uk\nYour task is to extend a predator/prey simulation. You should use the foxes-and-rabbits-handout\nproject (presented in the lecture, available for download from KEATS) as a basis for your own\nproject, and modify and extend it to make it more interesting. Note that this is slightly diﬀerent\nfrom the book project, so please use the version from KEATS, not from the book projects.\nYou must replace the Fox and Rabbit classes with diﬀerent kinds of predator and prey to simulate\na diﬀerent habitat (for example, under water, in a jungle, or in a fantasy world). You may add\nadditional classes to those included in the existing project.\nThis project is a pair programming task. You must work in pairs. Information about pair pro-\ngramming is provided separately. We will not accept submissions by individuals.\n1 Core tasks\nYou should aim at completing all core tasks. They are as follows.\n• Your simulation should have at least ﬁve diﬀerent kinds of acting species. At least two of\nthese should be predators (they eat another species), and at least two of them should not be\npredators (they may eat plants). Plants can either be assumed to always be available (as in\nthe original project), or they can be simulated (see below).\n• At least two predators should compete for the same food source.\n• Some or all of the species should distinguish male and female individuals. For these, the\ncreatures can only propagate when a male and female individual meet. (“Meet” means they\nneed to be within a speciﬁed distance to each other, for example in a neighbouring cell.)\nYou will need to experiment with the parameters for breeding probability to create a stable\npopulation.\n• You should keep track of the time of day. At least some creatures should exhibit diﬀerent\nbehaviour at some time of the day (for example: they may sleep at night and not move\nduring that time).\nYou should implement the core tasks ﬁrst before you move on to the extension tasks.\n1\n2 Challenge tasks\nOnce you have ﬁnished the core tasks, implement one or more extension tasks. You can either\nchoose from the following suggestions, or invent your own. You will be graded on a maximum of\nfour extensions.\n• Add plants. Plants grow at a given rate, but they do not move. Some creatures eat plants.\nThey will die if they do not ﬁnd their food plant.\n• Add weather. Weather can change, and it inﬂuences the behaviour of some simulated aspects.\nFor example, grass may not grow without rain, or predators cannot see well in fog.\n• Add disease. Some animals are occasionally infected. Infection can spread to other animals\nwhen they meet.\nIf you invent your own extension tasks, check with your class supervisor before implementing\nthem. You can get their comments to ensure they your idea is not too simple or too diﬃcult.\nTo get full marks on this assignment you must demonstrate exceptional technical aptitude with\nthe challenge tasks you implement.\n3 Extra work — just for fun\nYou can extend the GUI (the graphical user interface) itself if you like, but no marks will be\nawarded for this work. If you do this — that’s good, but it is purely for fun and for your own\npractice.\n4 Submission and Deadline\nThe submission consists of two parts: your code and a report documenting it.\nThe code\nYou have to submit a Jar of your project to the “Assignment 3: code submission” link in the\nassignment 3 section on the PPA KEATS page, before the due date. Your code will be assessed\nfor:\n• correct use of language constructs;\n• commenting (is everything well-documented?);\n• style (is the code nicely laid out and formatted, and are the variable names chosen well?);\n• design (consideration given to cohesion, coupling, maintainability);\n• challenge tasks (extra marks for technically impressive extensions).\nThe report\nYou also need to submit a written report that includes the following.\n• A description of your simulation, including the types of species that you are simulating, their\nbehaviour and interactions.\n• A list and description of all extension tasks you have implemented.\n2\n• Known bugs or problems (Note: for a bug in your code that you document yourself, you\nmay not lose many marks — maybe none, if it is in a challenge task. For bugs that we ﬁnd\nthat you did not document you will probably lose marks.)\nThe report must be submitted to the “Assignment 2: report submission” link in the assignment 2\nsection on the PPA KEATS page, before the deadline.\nThe report should be no more than four pages long.\nMarking the assignment will involve an interview in your lab class. More detail about the interview\nwill be provided separately.\nThe report must clearly state the names and student numbers of all students who worked on the\nsubmission.\nThe code and report must be submitted via the assignment 3 submission link on the PPA KEATS\npage, before the deadline, by both members of your pair. Both the source code and the report\nshould clearly state the names of both authors.\n5 Mark breakdown\nThe marks are distributed as follows:\n• Report: 2 marks. However, if the report does not adequately describe your code you may\nlose marks on that part of your code as well. Not submitting a report will result in 0 marks\nfor the entire submission.\n• Base tasks4 marks.\n• Challenge tasks10 marks.\n• Commenting and style4 marks.\n6 Deadline\nThis assignment (code and report) is due Friday 22nd February, 17:00.\n3",
  "19~20": "4CCS1PPA Programming Practice and Applications\nCoursework 3: Predator/Prey Simulation\nMichael K¨ olling, Josh Murphy, Jeﬀery Raphael\nQuestions? programming@kcl.ac.uk\nYour task is to extend a predator/prey simulation. You should use the foxes-and-rabbits-handout\nproject (available for download from KEATS) as a basis for your own project, and modify and\nextend it to make it more interesting. Note that this is slightly diﬀerent from the book project,\nso please use the version from KEATS, not from the book projects.\nYou must replace the Fox and Rabbit classes with diﬀerent kinds of predator and prey to simulate\na diﬀerent habitat (for example, under water, in a jungle, or in a fantasy world). You may add\nadditional classes to those included in the existing project.\nThis project is a pair programming task. You must work in pairs. Information about pair pro-\ngramming is provided separately. We will not accept submissions by individuals.\n1 Core tasks\nYou should aim at completing all core tasks. They are as follows.\n• Your simulation should have at least ﬁve diﬀerent kinds of acting species. At least two of\nthese should be predators (they eat another species), and at least two of them should not be\npredators (they may eat plants). Plants can either be assumed to always be available (as in\nthe original project), or they can be simulated (see below).\n• At least two predators should compete for the same food source.\n• Some or all of the species should distinguish male and female individuals. For these, the\ncreatures can only propagate when a male and female individual meet. (“Meet” means they\nneed to be within a speciﬁed distance to each other, for example in a neighbouring cell.)\nYou will need to experiment with the parameters for breeding probability to create a stable\npopulation.\n• You should keep track of the time of day. At least some creatures should exhibit diﬀerent\nbehaviour at some time of the day (for example: they may sleep at night and not move\nduring that time).\nYou should implement the core tasks ﬁrst before you move on to the extension tasks.\n1\n2 Challenge tasks\nOnce you have ﬁnished the core tasks, implement one or more extension tasks. You can either\nchoose from the following suggestions, or invent your own. You will be graded on a maximum of\nfour extensions.\n• Add plants. Plants grow at a given rate, but they do not move. Some creatures eat plants.\nThey will die if they do not ﬁnd their food plant.\n• Add weather. Weather can change, and it inﬂuences the behaviour of some simulated aspects.\nFor example, grass may not grow without rain, or predators cannot see well in fog.\n• Add disease. Some animals are occasionally infected. Infection can spread to other animals\nwhen they meet.\nIf you invent your own extension tasks, check with your class supervisor before implementing\nthem. You can get their comments to ensure they your idea is not too simple or too diﬃcult.\nTo get full marks on this assignment you must demonstrate exceptional technical aptitude with\nthe challenge tasks you implement.\n3 Submission and Deadline\nThe submission consists of two parts: your code and a report documenting it. The code and report\nmust be submitted before the deadline, by both members of your pair . Both the source code\nand the report should clearly state the names of both authors.\nThe Code\nYou have to submit a Jar of your project to the “Assignment 3: Code Submission” link in the\nassignment 3 section on the PPA KEATS page, before the due date. The Jar ﬁle must contain\nyour source code, i.e., the *.java ﬁles. Your code will be assessed for:\n1. Program Correctness —The application meets all of the program speciﬁcations, i.e., the\nstudent has completed all of the base tasks including following submission instructions (e.g.,\nthe student submitted a Jar ﬁle of their BlueJ project).\n2. Code Elegance —The application is written in such a way that the code is reusable and\neﬃcient (i.e., memory usage and complexity). The application appropriately uses loops\nand functions to reduce code complexity and/or repeated code. The application does not\nhave hard-coded solutions or poorly designed solutions. A poorly designed solution is overly\ncomplicated, utilises excessive amounts of memory or utilises a slower approach to a problem.\n3. Documentation —The application is suﬃciently documented. Good documentation/comments\nshould explain what the code does and how it does it. Comments can also be used to highlight\nnuances in your solution, e.g., a segment of code that only works under certain conditions.\n4. Readability —The application is easy to understand and uses good programming practices.\nThe report\nThe report must be submitted to the “Assignment 3: Report Submission” link in the assignment\n3 section on the PPA KEATS page, before the deadline. The report should be no more than\nfour pages long. Marking the assignment will involve an interview in your lab class. More detail\nabout the interview will be provided separately. The report must clearly state the names and\nstudent numbers of all students who worked on the submission. The report should also contain\nthe following :\n2\n• A description of your simulation, including the types of species that you are simulating, their\nbehaviour and interactions.\n• A list and description of all extension tasks you have implemented.\n• Code limitations/problems, e.g., code segment that uses a hard coded solution.\nThe report will be marked out of 100. Additional details on how marks are given can be found\nin the Marking Rubric. Once your submission is marked and written feedback has been returned\nto you, you will have the opportunity to get additional verbal feedback on your submission from\nyour lab TAs.\n4 Deadline\nAfter submitting your work on KEATS, check that (1) your Jar ﬁle and report (pdf) has been\nsuccessfully uploaded and (2) that the Jar ﬁle contains all of your source ﬁles. This assignment\n(code and report) is due Sunday 23rd February, 23:59.\n3",
  "20~21": "4CCS1PPA Programming Practice and Applications\nCoursework 3: Predator/Prey Simulation\nMichael K¨ olling and Jeﬀery Raphael\nQuestions? programming@kcl.ac.uk\nYour task is to extend a predator/prey simulation. You should use the foxes-and-rabbits-handout\nproject (available for download from KEATS) as a basis for your own project, and modify and\nextend it to make it more interesting. Note that this is slightly diﬀerent from the book project,\nso please use the version from KEATS, not from the book projects.\nYou must replace the Fox and Rabbit classes with diﬀerent kinds of predator and prey to simulate\na diﬀerent habitat (for example, under water, in a jungle, or in a fantasy world). You may add\nadditional classes to those included in the existing project.\nThis project is a pair programming task. You must work in pairs. Information about pair pro-\ngramming is provided separately.\n1 Pair Programming\nYou will already have had some experience of pair programming in your previous lab sessions.\nThe pair programming document on KEATS will provide you the information on the structure of\nAssignment 3. Make sure you have read this document before continuing with Assignment 3.\n2 Register Your Partner\nOnce you have found a partner, it is vital that you both oﬃcially register your partnership on\nKEATS, Assignment 3: Partner Selection ( Please have this done by Tuesday, Feb. 9th,\n23:59). If you are unable to ﬁnd a partner, someone will be assigned to you randomly. It’s\nrecommended you spend at least 30 minutes discussing ideas and possibilities for your solution\nwith your partner. This coursework allows you to have a lot of ﬂexibility on what you deliver —\nbe creative!\n1\n3 Base Tasks\n• Your simulation should have at least ﬁve diﬀerent kinds of acting species. At least two of\nthese should be predators (they eat another species), and at least two of them should not be\npredators (they may eat plants). Plants can either be assumed to always be available (as in\nthe original project), or they can be simulated (see below).\n• At least two predators should compete for the same food source.\n• Some or all of the species should distinguish male and female individuals. For these, the\ncreatures can only propagate when a male and female individual meet. Meet means they\nneed to be within a speciﬁed distance to each other, for example in a neighbouring cell.\nYou will need to experiment with the parameters for breeding probability to create a stable\npopulation.\n• You should keep track of the time of day. At least some creatures should exhibit diﬀerent\nbehaviour at some time of the day (for example: they may sleep at night and not move\nduring that time).\nYou should implement the base tasks ﬁrst before you move on to the Challenge tasks.\n4 Challenge Tasks\nOnce you have ﬁnished the base tasks, implement one or more challenge tasks. You can either\nchoose from the following suggestions, or invent your own. You will be graded on a maximum of\nfour challenge tasks.\n• Simulate plants. Plants grow at a given rate, but they do not move. Some creatures eat\nplants. They will die if they do not ﬁnd their food plant.\n• Simulate weather. Weather can change, and it inﬂuences the behaviour of some simulated\naspects. For example, grass may not grow without rain, or predators cannot see well in fog.\n• Simulate disease. Some animals are occasionally infected. Infection can spread to other\nanimals when they meet.\n2\n5 Submission\nThe submission consists of two parts: your code and a report documenting it. The code and report\nmust be submitted before the deadline, by both members of your pair .\n5.1 Code\nYou have to submit a Jar of your project to the “Assignment 3: Code Submission” link in the\nAssignment 3 section on the PPA KEATS page, before the due date. The Jar ﬁle must contain\nyour source code, i.e., the *.java ﬁles, and runs on BlueJ .\n5.2 Report\nThe report must be submitted to the “Assignment 3: Report Submission” link in the Assignment\n3 section on the PPA KEATS page, before the deadline. The report should be no more than four\npages long.\nThe report should contain the following :\n• The names and student numbers of all students who worked on the submission.\n• A description of your simulation, including the types of species that you are simulating, their\nbehaviour and interactions.\n• A list and description of all extension tasks you have implemented.\n• Code limitations, e.g., code segment that uses a hard coded solution.\n6 Deadline\nAfter submitting your work on KEATS, check that (1) your Jar ﬁle and report (pdf) has been\nsuccessfully uploaded and (2) that the Jar ﬁle contains all of your source ﬁles. This assignment\n(code and report) is due Wednesday, March 3rd, 23:59.\n7 Marking\nApplications are marked based on four categories:\n1. Program Correctness —The application meets all of the program speciﬁcations, i.e., the\nstudent has completed all of the base tasks including following submission instructions (e.g.,\nthe student submitted a Jar ﬁle of their BlueJ project).\n2. Code Elegance —The application is written in such a way that the code is reusable and\neﬃcient (i.e., memory usage and complexity). The application appropriately uses loops\nand functions to reduce code complexity and/or repeated code. The application does not\nhave hard-coded solutions or poorly designed solutions. A poorly designed solution is overly\ncomplicated, utilises excessive amounts of memory or utilises a slower approach to a problem.\n3. Documentation —The application is suﬃciently documented. Good documentation/comments\nshould explain what the code does and how it does it. Comments can also be used to highlight\nnuances in your solution, e.g., a segment of code that only works under certain conditions.\n4. Readability —The application is easy to understand and uses good programming practices.\nAdditional details on how marks are given can be found in the Marking Rubric. Once your\nsubmission is marked and written feedback has been returned to you, you will have the opportunity\nto get additional verbal feedback on your submission from your lab TAs.\n3",
  "21~22": "4CCS1PPA Programming Practice and Applications\nCoursework 3: Predator/Prey Simulation\nMichael K¨ olling and Jeﬀery Raphael\nQuestions? programming@kcl.ac.uk\nYour task is to extend a predator/prey simulation. You should use the foxes-and-rabbits-handout\nproject (available for download from KEATS) as a basis for your own project, and modify and\nextend it to make it more interesting. Note that this is slightly diﬀerent from the book project,\nso please use the version from KEATS, not from the book projects.\nYou must replace the Fox and Rabbit classes with diﬀerent kinds of predator and prey to simulate\na diﬀerent habitat (for example, under water, in a jungle, or in a fantasy world). You may add\nadditional classes to those included in the existing project.\nThis project is a pair programming task. You must work in pairs. Information about pair pro-\ngramming is provided separately.\n1 Pair Programming\nThe pair programming document on KEATS will provide you the information on the structure of\nAssignment 3. Make sure you have read this document before continuing with Assignment 3.\n2 Register Your Partner\nOnce you have found a partner, it is vital that you both oﬃcially register your partnership on\nKEATS, Assignment 3: Partner Selection.\n1\n3 Base Tasks\nThis coursework allows you to have a lot of ﬂexibility on what you deliver — be creative!\n• Your simulation should have at least ﬁve diﬀerent kinds of acting species. At least two of\nthese should be predators (they eat another species), and at least two of them should not be\npredators (they may eat plants). You can either treat plants as if they’re always available\nor simulate their growth/death (see challenge task).\n• At least two predators should compete for the same food source.\n• Some or all of the species should distinguish male and female individuals. For these, the\ncreatures can only propagate when a male and female individual meet. Meet means they\nneed to be within a speciﬁed distance to each other, for example in a neighbouring cell.\nYou will need to experiment with the parameters for breeding probability to create a stable\npopulation.\n• You should keep track of the time of day. At least some creatures should exhibit diﬀerent\nbehaviour at some time of the day (for example: they may sleep at night and not move\naround during that time).\nYou should implement the base tasks ﬁrst before you move on to the Challenge tasks.\n4 Challenge Tasks\nOnce you have ﬁnished the base tasks, implement one or more challenge tasks. You can either\nchoose from the following suggestions, or invent your own. You will be graded on a maximum of\nfour challenge tasks.\n• Simulate plants. Plants grow at a given rate, but they do not move. Some creatures eat\nplants. They will die if they do not ﬁnd their food plant.\n• Simulate weather. Weather can change, and it inﬂuences the behaviour of some simulated\naspects. For example, grass may not grow without rain, or predators cannot see well in fog.\n• Simulate disease. Some animals are occasionally infected. Infection can spread to other\nanimals when they meet.\n2\n5 Submission\nThe submission consists of two parts: your code and a report documenting your submission. The\ncode and report must be submitted before the deadline, by both members of your pair .\n5.1 Code\nYou have to submit a Jar of your project to the “Assignment 3: Code Submission” link in the\nAssignment 3 section on the PPA KEATS page, before the due date. The Jar ﬁle must contain\nyour source code, i.e., the *.java ﬁles, and runs on BlueJ .\n5.2 Report\nThe report must be submitted to the “Assignment 3: Report Submission” link in the Assignment\n3 section on the PPA KEATS page, before the deadline. The report should be no more than four\npages long.\nThe report should contain the following :\n• The names and student numbers of all students who worked on the submission.\n• A description of your simulation, including the types of species that you are simulating, their\nbehaviour and interactions.\n• A list and description of all extension tasks you have implemented.\n6 Deadline\nAfter submitting your work on KEATS, check that (1) your Jar ﬁle and report (pdf) has been\nsuccessfully uploaded and (2) that the Jar ﬁle contains all of your source ﬁles. This assignment\n(code and report) is due Wednesday, March 2nd, 23:59.\n7 Marking\nApplications are marked based on four categories:\n1. Program Correctness —The application meets all of the program speciﬁcations, i.e., the\nstudent has completed all of the base tasks including following submission instructions (e.g.,\nthe student submitted a Jar ﬁle of their BlueJ project).\n2. Code Elegance —The application is written in such a way that the code is reusable and\neﬃcient (i.e., memory usage and complexity). The application appropriately uses loops\nand functions to reduce code complexity and/or repeated code. The application does not\nhave hard-coded solutions or poorly designed solutions. A poorly designed solution is overly\ncomplicated, utilises excessive amounts of memory or utilises a slower approach to a problem.\n3. Documentation —The application is suﬃciently documented. Good documentation/comments\nshould explain what the code does and how it does it. Comments can also be used to highlight\nnuances in your solution, e.g., a segment of code that only works under certain conditions.\n4. Readability —The application is easy to understand and uses good programming practices.\nAdditional details on how marks are given can be found in the Marking Rubric.\n3"
}